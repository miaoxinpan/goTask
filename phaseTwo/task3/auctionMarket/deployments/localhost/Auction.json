{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ended",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getUsdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        }
      ],
      "name": "pendingReturns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef1863b379af6654783ba23ba5df8e7fbd2ed8bbe6867b6b7497efb64284dda9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "1786357",
    "logsBloom": "0x
    "blockHash": "0x6bc21fceb1a94f8b710ea83675c4bd2096c42f29b530a90824d194e2359a9faf",
    "transactionHash": "0xef1863b379af6654783ba23ba5df8e7fbd2ed8bbe6867b6b7497efb64284dda9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xef1863b379af6654783ba23ba5df8e7fbd2ed8bbe6867b6b7497efb64284dda9",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0x23817ba079932ce77facf12249d946e69012525002900283e8e73d920c5c54f1",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000006860e985",
        "logIndex": 0,
        "blockHash": "0x6bc21fceb1a94f8b710ea83675c4bd2096c42f29b530a90824d194e2359a9faf"
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "1786357",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    1,
    100,
    3600,
    "0x65afadd39029741b3b8f0756952c74678c9cec93",
    "0x8ab2ef2c3bd1ea0e6b6a6ba2e63c7ba5ea1e7c1a",
    "0x509ee0d083ddf8ac028f2a56731412edd63223b9",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 2,
  "solcInputHash": "36f189e085cd96d73ce9f46893970c85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw(address)\":{\"notice\":\"\\u63d0\\u73b0\\u65b9\\u6cd5 1. \\u9632\\u6b62\\u91cd\\u5165\\u653b\\u51fb\\uff08Reentrancy Attack\\uff09 \\u8ba9\\u7528\\u6237\\u81ea\\u5df1\\u4e3b\\u52a8\\u63d0\\u53d6\\u4f59\\u989d\\uff0c\\u5408\\u7ea6\\u53ea\\u5728\\u7528\\u6237\\u8c03\\u7528\\u65f6\\u8f6c\\u8d26\\uff0c\\u6781\\u5927\\u964d\\u4f4e\\u91cd\\u5165\\u98ce\\u9669 2. \\u63d0\\u9ad8\\u5b89\\u5168\\u6027\\u548c\\u53ef\\u63a7\\u6027    \\u7528\\u6237\\u53ea\\u80fd\\u63d0\\u53d6\\u5c5e\\u4e8e\\u81ea\\u5df1\\u7684\\u4f59\\u989d\\uff0c\\u5408\\u7ea6\\u4e0d\\u4f1a\\u4e3b\\u52a8\\u7ed9\\u7528\\u6237\\u8f6c\\u8d26\\uff0c\\u907f\\u514d\\u610f\\u5916\\u6216\\u6076\\u610f\\u64cd\\u4f5c 3. \\u63d0\\u5347\\u7528\\u6237\\u4f53\\u9a8c  \\u7528\\u6237\\u53ef\\u4ee5\\u968f\\u65f6\\u63d0\\u73b0\\uff0c\\u4e0d\\u53d7\\u62cd\\u5356\\u6d41\\u7a0b\\u5f71\\u54cd\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auction.sol\":\"Auction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/auction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\n//\\u628a\\u5582\\u4ef7\\u7684\\u63a5\\u53e3\\u5f15\\u5165\\u8fdb\\u6765\\r\\ninterface IPriceOracle {\\r\\n    function getLatestEthUsdPrice() external view returns (int256);\\r\\n    function getLatestUsdcUsdPrice() external view returns (int256);\\r\\n    function getLatestDaiUsdPrice() external view returns (int256);\\r\\n    function getLatestUsdtUsdPrice() external view returns (int256);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Auction {\\r\\n    //\\u9884\\u8a00\\u673a\\u5408\\u7ea6\\u7684\\u5730\\u5740 \\u4e0d\\u7136\\u548b\\u8c03\\u7528\\u4ef7\\u683c\\u63a5\\u53e3\\r\\n    address public priceOracle;\\r\\n    address public eth;//\\u5e01\\u79cd\\u5730\\u5740   \\r\\n    address public usdc;\\r\\n    address public dai;\\r\\n    address public usdt;\\r\\n\\r\\n\\r\\n\\r\\n    address public seller;//\\u51fa\\u552e\\u4eba\\u5730\\u5740\\r\\n    address public nftAddress;//nft\\u7269\\u54c1\\u5730\\u5740\\r\\n    uint256 public tokenId;//nft\\u91cc\\u9762\\u7ef4\\u62a4\\u4e86\\u4e00\\u4e2atokenId\\uff0c\\u8fd9\\u4e2a\\u5c31\\u662f\\u90a3\\u4e2aid\\r\\n    uint256 public startPrice;//\\u521d\\u59cb\\u4ef7\\u683c\\r\\n    uint256 public endTime;//\\u7ed3\\u675f\\u65f6\\u95f4  \\u7528\\u7684\\u662f\\u65f6\\u95f4\\u6233\\r\\n    address public highestBidder;//\\u6700\\u9ad8\\u51fa\\u4ef7\\u4eba\\u7684\\u5730\\u5740\\r\\n    address public highestBidToken;    // \\u6700\\u9ad8\\u51fa\\u4ef7\\u5e01\\u79cd  (ETH=address(0))\\r\\n    uint256 public highestBidAmount;   // \\u6700\\u9ad8\\u51fa\\u4ef7\\u5e01\\u79cd\\u7684\\u6570\\u91cf\\r\\n    uint256 public highestBidUsd;      // \\u6700\\u9ad8\\u51fa\\u4ef7\\u7684\\u7f8e\\u5143\\u4ef7\\u503c\\uff088\\u4f4d\\u5c0f\\u6570\\uff09\\r\\n    bool public ended;//\\u662f\\u5426\\u7ed3\\u675f\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //\\u63d0\\u73b0\\u540d\\u5355\\r\\n    //mapping(address => uint256) public pendingReturns;\\r\\n    //\\u56e0\\u4e3a\\u4e0d\\u4ec5\\u4ec5\\u662feth \\u8fd8\\u6709\\u5176\\u4ed6\\u7684erc20\\u7684\\u4ee3\\u5e01\\u9700\\u8981\\u9000\\u56de \\u6240\\u4ee5\\u8fd9\\u91cc\\u5355\\u7eaf\\u8bb0\\u5f55\\u5730\\u5740\\u5df2\\u7ecf\\u4e0d\\u591f\\u4e86  \\r\\n    //\\u7528\\u5d4c\\u5957map\\u7684\\u65b9\\u5f0f \\u91cd\\u65b0\\u8bbe\\u8ba1\\u4e00\\u4e2a\\u6570\\u636e\\u7ed3\\u6784\\u6765\\u5b58\\u50a8\\u53ef\\u4ee5\\u4f53\\u73b0\\u7684\\u540d\\u5355\\r\\n    //pendingReturns[\\u7528\\u6237\\u5730\\u5740][\\u5e01\\u79cd\\u5730\\u5740] = \\u91d1\\u989d\\r\\n    mapping(address userAddr=> mapping(address coinAddr=>uint256 amount)) public pendingReturns;\\r\\n\\r\\n    //\\u8bb0\\u5f55\\u65e5\\u5fd7\\r\\n    //\\u521b\\u5efa\\u62cd\\u5356\\r\\n    event AuctionStarted(address indexed seller, address indexed nft, uint256 tokenId, uint256 startPrice, uint256 endTime);\\r\\n    //\\u51fa\\u4ef7\\u65e5\\u5fd7\\r\\n    //event NewBid(address indexed bidder, uint256 amount);\\r\\n    //\\u73b0\\u5728\\u591a\\u5e01\\u79cd\\u62cd\\u5356\\uff0c\\u6240\\u4ee5\\u8bb0\\u5f55\\u7684\\u8bdd \\u628a\\u8fd9\\u4e9b\\u4fe1\\u606f\\u4e5f\\u4e00\\u8d77\\u8bb0\\u5f55\\r\\n    event NewBid(address indexed bidder,address indexed coinAddr, uint256 amount, uint256 usdValue);\\r\\n    //\\u63d0\\u73b0\\u65e5\\u5fd7\\r\\n    event Withdraw(address indexed bidder,address indexed coinAddr, uint256 amount);\\r\\n    //\\u62cd\\u5356\\u7ed3\\u675f\\r\\n    event AuctionEnded(address winner,address indexed coinAddr, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address _seller,\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _startPrice,\\r\\n        uint256 _duration,//\\u6301\\u7eed\\u65f6\\u95f4 \\u65f6\\u95f4\\u6233\\r\\n        address _usdc,\\r\\n        address _dai,\\r\\n        address _usdt,\\r\\n        address _priceOracle\\r\\n    ) {\\r\\n        seller=_seller;\\r\\n        nftAddress=_nftAddress;\\r\\n        tokenId=_tokenId;\\r\\n        startPrice=_startPrice;\\r\\n        endTime=block.timestamp + _duration;\\r\\n        usdc=_usdc;\\r\\n        dai=_dai;\\r\\n        usdt=_usdt;\\r\\n        priceOracle=_priceOracle;\\r\\n        eth=address(0);\\r\\n        emit AuctionStarted(seller, nftAddress, tokenId, startPrice, endTime);\\r\\n    }\\r\\n    //\\u62cd\\u5356\\u51fa\\u4ef7\\r\\n    //\\u6539\\u4e3a\\u7528\\u7f8e\\u5143\\u8861\\u91cf\\u4ef7\\u503c\\u7684\\u8bdd \\u5c31\\u5f97\\u4f20\\u5165\\u4ed6\\u6240\\u82b1\\u8d39\\u7684\\u5e01\\u79cd\\u5730\\u5740\\r\\n    function bid(address coinAddr,uint256  amount) external payable {\\r\\n        require(block.timestamp < endTime, \\\"Auction ended\\\");\\r\\n        //\\u5982\\u679c\\u51fa\\u4ef7\\u6bd4\\u5f53\\u524d\\u6700\\u9ad8\\u4ef7\\uff0c\\u5e76\\u4e14\\u51fa\\u4ef7\\u6bd4\\u5f00\\u59cb\\u4ef7\\u9ad8\\u624d\\u8fdb\\u884c\\u4e0b\\u4e00\\u6b65\\r\\n        //require(msg.value > highestBid && msg.value >= startPrice, \\\"Bid too low\\\");\\r\\n        \\r\\n        //\\u5148\\u62ff\\u5230\\u4ed6\\u5b9e\\u9645\\u5bf9\\u5e94\\u7684\\u4ef7\\u683c\\r\\n        uint256 usdValue =getUsdValue(coinAddr, amount);\\r\\n        //\\u518d\\u6839\\u636e\\u8fd9\\u4e2a\\u4ef7\\u503c\\u53bb\\u6bd4\\u8f83\\r\\n        require(usdValue > highestBidUsd , \\\"Bid too low\\\");\\r\\n\\r\\n        //\\u628a\\u6700\\u5f00\\u59cb\\u7684\\u90a3\\u4e2a0\\u6392\\u9664\\u4e86  \\r\\n        if (highestBidUsd != 0) {\\r\\n            // \\u628a\\u524d\\u4e00\\u4e2a\\u4ef7\\u9ad8\\u8005\\u52a0\\u5230\\u9000\\u94b1\\u540d\\u5355\\u91cc\\u9762 \\u8fd8\\u5f97\\u8bb0\\u5f55\\u5e01\\u79cd\\u5730\\u5740 \\u548c \\u94b1\\u5e01\\u6570\\u91cf\\r\\n            pendingReturns[highestBidder][highestBidToken]+= highestBidAmount;\\r\\n        }\\r\\n        highestBidder=msg.sender;\\r\\n        highestBidToken=coinAddr;\\r\\n        highestBidAmount=amount;\\r\\n        highestBidUsd=usdValue;\\r\\n        emit NewBid(msg.sender,coinAddr,amount,usdValue);\\r\\n    }\\r\\n    /**\\r\\n     * \\u63d0\\u73b0\\u65b9\\u6cd5\\r\\n     * 1. \\u9632\\u6b62\\u91cd\\u5165\\u653b\\u51fb\\uff08Reentrancy Attack\\uff09 \\u8ba9\\u7528\\u6237\\u81ea\\u5df1\\u4e3b\\u52a8\\u63d0\\u53d6\\u4f59\\u989d\\uff0c\\u5408\\u7ea6\\u53ea\\u5728\\u7528\\u6237\\u8c03\\u7528\\u65f6\\u8f6c\\u8d26\\uff0c\\u6781\\u5927\\u964d\\u4f4e\\u91cd\\u5165\\u98ce\\u9669\\r\\n     * 2. \\u63d0\\u9ad8\\u5b89\\u5168\\u6027\\u548c\\u53ef\\u63a7\\u6027    \\u7528\\u6237\\u53ea\\u80fd\\u63d0\\u53d6\\u5c5e\\u4e8e\\u81ea\\u5df1\\u7684\\u4f59\\u989d\\uff0c\\u5408\\u7ea6\\u4e0d\\u4f1a\\u4e3b\\u52a8\\u7ed9\\u7528\\u6237\\u8f6c\\u8d26\\uff0c\\u907f\\u514d\\u610f\\u5916\\u6216\\u6076\\u610f\\u64cd\\u4f5c\\r\\n     * 3. \\u63d0\\u5347\\u7528\\u6237\\u4f53\\u9a8c  \\u7528\\u6237\\u53ef\\u4ee5\\u968f\\u65f6\\u63d0\\u73b0\\uff0c\\u4e0d\\u53d7\\u62cd\\u5356\\u6d41\\u7a0b\\u5f71\\u54cd\\r\\n     */\\r\\n    function withdraw(address coinAddr) external {\\r\\n        uint256 amount = pendingReturns[msg.sender][coinAddr];\\r\\n        require(amount > 0, \\\"No funds\\\");\\r\\n        pendingReturns[msg.sender][coinAddr] = 0;\\r\\n        //\\u5206\\u522b\\u5904\\u7406\\u4e0d\\u540c\\u5e01\\u79cd\\u7684\\u63d0\\u73b0\\r\\n        if (coinAddr == address(0)) {\\r\\n            payable(msg.sender).transfer(amount);\\r\\n        } else {\\r\\n            IERC20(coinAddr).transfer(msg.sender, amount);\\r\\n        }\\r\\n        emit Withdraw(msg.sender,coinAddr,amount);\\r\\n    }\\r\\n\\r\\n    //\\u7ed3\\u675f\\u62cd\\u5356  \\u8f6c\\u79fbNFT\\u548c\\u8d44\\u91d1\\r\\n    function endAuction() external {\\r\\n        //\\u5224\\u65ad\\u65f6\\u95f4\\u662f\\u5426\\u5230\\u4e86\\r\\n        require(block.timestamp>=endTime,\\\"Auction not yet ended\\\");\\r\\n        //\\u8fd8\\u5f97\\u518d\\u5224\\u65ad\\u7ed3\\u675f\\u6807\\u5fd7\\u662f\\u5426\\u7ed3\\u675f \\u9632\\u6b62\\u591a\\u6b21\\u6682\\u505c\\r\\n        require(!ended, \\\"Auction already ended\\\");\\r\\n\\r\\n        //\\u628a\\u6807\\u5fd7\\u4f4d\\u6539\\u6210true\\r\\n        ended = true;\\r\\n\\r\\n        //\\u5730\\u5740\\u4e0d\\u662f\\u7a7a\\u7684\\r\\n        if (highestBidder != address(0)) {\\r\\n            // \\u8f6c\\u79fbNFT\\u7ed9\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\r\\n            //\\u8c03\\u7528 \\u8fd9\\u4e2a nftAddress NFT\\u5408\\u7ea6\\u7684 safeTransferFrom \\u65b9\\u6cd5\\r\\n            //IERC721 \\u662f ERC721 \\u6807\\u51c6\\u63a5\\u53e3\\uff0c\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\u8fd9\\u4e2a\\u5730\\u5740\\u4e0a\\u6709 safeTransferFrom \\u8fd9\\u4e2a\\u65b9\\u6cd5\\r\\n            //\\u8fd9\\u4f1a\\u5728\\u94fe\\u4e0a\\u6267\\u884c nftAddress \\u5408\\u7ea6\\u7684 safeTransferFrom(seller, highestBidder, tokenId)\\uff0c\\u5b8c\\u6210 NFT \\u7684\\u6240\\u6709\\u6743\\u8f6c\\u79fb\\r\\n            IERC721(nftAddress).safeTransferFrom(seller,highestBidder,tokenId);\\r\\n\\r\\n\\r\\n            // \\u8f6c\\u8d26ETH\\u7ed9\\u5356\\u5bb6\\r\\n            //Solidity \\u8bed\\u8a00\\u5185\\u7f6e\\u7684ETH \\u8f6c\\u8d26\\u8bed\\u6cd5\\r\\n            //payable(seller)\\uff1a\\u628a seller \\u5730\\u5740\\u8f6c\\u4e3a\\u53ef\\u63a5\\u6536 ETH \\u7684 payable \\u5730\\u5740\\u7c7b\\u578b\\r\\n            //.transfer(highestBid)\\uff1a\\u5411\\u8be5\\u5730\\u5740\\u53d1\\u9001 highestBid \\u6570\\u91cf\\u7684 ETH\\u3002\\r\\n            //payable(seller).transfer(highestBid);\\r\\n            //\\u591a\\u5e01\\u79cd\\u62cd\\u5356  \\u8fd9\\u8fb9\\u8f6c\\u8d26\\u65b9\\u5f0f\\u4fee\\u6539\\u4e00\\u4e0b  \\u517c\\u5bb9erc20\\u7684\\u5e38\\u7528\\u4ee3\\u5e01\\u4e0eeth\\r\\n            if(highestBidToken==address(0)){//eth\\r\\n                payable(seller).transfer(highestBidAmount);\\r\\n            }else{\\r\\n                IERC20(highestBidToken).transfer(seller, highestBidAmount);\\r\\n            }\\r\\n        } else {\\r\\n            // \\u6ca1\\u4eba\\u51fa\\u4ef7\\uff0cNFT\\u5f52\\u8fd8\\u5356\\u5bb6\\r\\n            IERC721(nftAddress).safeTransferFrom(address(this), seller, tokenId);\\r\\n        }\\r\\n        //\\u8bb0\\u5f55\\u7ed3\\u675f\\u62cd\\u5356\\u7ed3\\u675f\\u65e5\\u5fd7\\r\\n        emit AuctionEnded(highestBidder,highestBidToken, highestBidAmount);\\r\\n    }\\r\\n\\r\\n    //\\u6839\\u636e\\u5e01\\u79cd\\u6362\\u7b97\\u6210\\u7f8e\\u5143\\u4ef7\\u503c\\r\\n    function getUsdValue(address coinAddr, uint256 amount) public view returns (uint256) {\\r\\n        if (coinAddr == address(0)) {\\r\\n            int256 price = IPriceOracle(priceOracle).getLatestEthUsdPrice();\\r\\n            return amount * uint256(price) / 1e18;\\r\\n        } else if (coinAddr == usdc) {\\r\\n            int256 price = IPriceOracle(priceOracle).getLatestUsdcUsdPrice();\\r\\n            return amount * uint256(price) / 1e6;\\r\\n        } else if (coinAddr == dai) {\\r\\n            int256 price = IPriceOracle(priceOracle).getLatestDaiUsdPrice();\\r\\n            return amount * uint256(price) / 1e18;\\r\\n        } else if (coinAddr == usdt) {\\r\\n            int256 price = IPriceOracle(priceOracle).getLatestUsdtUsdPrice();\\r\\n            return amount * uint256(price) / 1e6;\\r\\n        }   \\r\\n        revert(\\\"Unsupported token\\\");\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xfc7d57eb7ba61327a5fac587c0bbd71b27e1824c2003cfa30217cf86e44ce6c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw(address)": {
        "notice": "提现方法 1. 防止重入攻击（Reentrancy Attack） 让用户自己主动提取余额，合约只在用户调用时转账，极大降低重入风险 2. 提高安全性和可控性    用户只能提取属于自己的余额，合约不会主动给用户转账，避免意外或恶意操作 3. 提升用户体验  用户可以随时提现，不受拍卖流程影响"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7385,
        "contract": "contracts/auction.sol:Auction",
        "label": "priceOracle",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7387,
        "contract": "contracts/auction.sol:Auction",
        "label": "eth",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7389,
        "contract": "contracts/auction.sol:Auction",
        "label": "usdc",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7391,
        "contract": "contracts/auction.sol:Auction",
        "label": "dai",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7393,
        "contract": "contracts/auction.sol:Auction",
        "label": "usdt",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7395,
        "contract": "contracts/auction.sol:Auction",
        "label": "seller",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7397,
        "contract": "contracts/auction.sol:Auction",
        "label": "nftAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7399,
        "contract": "contracts/auction.sol:Auction",
        "label": "tokenId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7401,
        "contract": "contracts/auction.sol:Auction",
        "label": "startPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7403,
        "contract": "contracts/auction.sol:Auction",
        "label": "endTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7405,
        "contract": "contracts/auction.sol:Auction",
        "label": "highestBidder",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7407,
        "contract": "contracts/auction.sol:Auction",
        "label": "highestBidToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7409,
        "contract": "contracts/auction.sol:Auction",
        "label": "highestBidAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7411,
        "contract": "contracts/auction.sol:Auction",
        "label": "highestBidUsd",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7413,
        "contract": "contracts/auction.sol:Auction",
        "label": "ended",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 7419,
        "contract": "contracts/auction.sol:Auction",
        "label": "pendingReturns",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}